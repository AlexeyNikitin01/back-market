// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductDiscount is an object representing the database table.
type ProductDiscount struct {
	ID              int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	DiscountPremium int       `boil:"discount_premium" json:"discountPremium" toml:"discountPremium" yaml:"discountPremium"`
	CreatedAt       time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt       time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	DeletedAt       time.Time `boil:"deleted_at" json:"deletedAt" toml:"deletedAt" yaml:"deletedAt"`

	R *productDiscountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productDiscountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductDiscountColumns = struct {
	ID              string
	DiscountPremium string
	CreatedAt       string
	UpdatedAt       string
	DeletedAt       string
}{
	ID:              "id",
	DiscountPremium: "discount_premium",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	DeletedAt:       "deleted_at",
}

var ProductDiscountTableColumns = struct {
	ID              string
	DiscountPremium string
	CreatedAt       string
	UpdatedAt       string
	DeletedAt       string
}{
	ID:              "product_discounts.id",
	DiscountPremium: "product_discounts.discount_premium",
	CreatedAt:       "product_discounts.created_at",
	UpdatedAt:       "product_discounts.updated_at",
	DeletedAt:       "product_discounts.deleted_at",
}

// Generated where

var ProductDiscountWhere = struct {
	ID              whereHelperint64
	DiscountPremium whereHelperint
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
	DeletedAt       whereHelpertime_Time
}{
	ID:              whereHelperint64{field: "\"product_discounts\".\"id\""},
	DiscountPremium: whereHelperint{field: "\"product_discounts\".\"discount_premium\""},
	CreatedAt:       whereHelpertime_Time{field: "\"product_discounts\".\"created_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"product_discounts\".\"updated_at\""},
	DeletedAt:       whereHelpertime_Time{field: "\"product_discounts\".\"deleted_at\""},
}

// ProductDiscountRels is where relationship names are stored.
var ProductDiscountRels = struct {
	Products string
}{
	Products: "Products",
}

// productDiscountR is where relationships are stored.
type productDiscountR struct {
	Products ProductSlice `boil:"Products" json:"Products" toml:"Products" yaml:"Products"`
}

// NewStruct creates a new relationship struct
func (*productDiscountR) NewStruct() *productDiscountR {
	return &productDiscountR{}
}

func (r *productDiscountR) GetProducts() ProductSlice {
	if r == nil {
		return nil
	}
	return r.Products
}

// productDiscountL is where Load methods for each relationship are stored.
type productDiscountL struct{}

var (
	productDiscountAllColumns            = []string{"id", "discount_premium", "created_at", "updated_at", "deleted_at"}
	productDiscountColumnsWithoutDefault = []string{"discount_premium"}
	productDiscountColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	productDiscountPrimaryKeyColumns     = []string{"id"}
	productDiscountGeneratedColumns      = []string{"id"}
)

type (
	// ProductDiscountSlice is an alias for a slice of pointers to ProductDiscount.
	// This should almost always be used instead of []ProductDiscount.
	ProductDiscountSlice []*ProductDiscount
	// ProductDiscountHook is the signature for custom ProductDiscount hook methods
	ProductDiscountHook func(context.Context, boil.ContextExecutor, *ProductDiscount) error

	productDiscountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productDiscountType                 = reflect.TypeOf(&ProductDiscount{})
	productDiscountMapping              = queries.MakeStructMapping(productDiscountType)
	productDiscountPrimaryKeyMapping, _ = queries.BindMapping(productDiscountType, productDiscountMapping, productDiscountPrimaryKeyColumns)
	productDiscountInsertCacheMut       sync.RWMutex
	productDiscountInsertCache          = make(map[string]insertCache)
	productDiscountUpdateCacheMut       sync.RWMutex
	productDiscountUpdateCache          = make(map[string]updateCache)
	productDiscountUpsertCacheMut       sync.RWMutex
	productDiscountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productDiscountAfterSelectHooks []ProductDiscountHook

var productDiscountBeforeInsertHooks []ProductDiscountHook
var productDiscountAfterInsertHooks []ProductDiscountHook

var productDiscountBeforeUpdateHooks []ProductDiscountHook
var productDiscountAfterUpdateHooks []ProductDiscountHook

var productDiscountBeforeDeleteHooks []ProductDiscountHook
var productDiscountAfterDeleteHooks []ProductDiscountHook

var productDiscountBeforeUpsertHooks []ProductDiscountHook
var productDiscountAfterUpsertHooks []ProductDiscountHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductDiscount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductDiscount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductDiscount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductDiscount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductDiscount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductDiscount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductDiscount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductDiscount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductDiscount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productDiscountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductDiscountHook registers your hook function for all future operations.
func AddProductDiscountHook(hookPoint boil.HookPoint, productDiscountHook ProductDiscountHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productDiscountAfterSelectHooks = append(productDiscountAfterSelectHooks, productDiscountHook)
	case boil.BeforeInsertHook:
		productDiscountBeforeInsertHooks = append(productDiscountBeforeInsertHooks, productDiscountHook)
	case boil.AfterInsertHook:
		productDiscountAfterInsertHooks = append(productDiscountAfterInsertHooks, productDiscountHook)
	case boil.BeforeUpdateHook:
		productDiscountBeforeUpdateHooks = append(productDiscountBeforeUpdateHooks, productDiscountHook)
	case boil.AfterUpdateHook:
		productDiscountAfterUpdateHooks = append(productDiscountAfterUpdateHooks, productDiscountHook)
	case boil.BeforeDeleteHook:
		productDiscountBeforeDeleteHooks = append(productDiscountBeforeDeleteHooks, productDiscountHook)
	case boil.AfterDeleteHook:
		productDiscountAfterDeleteHooks = append(productDiscountAfterDeleteHooks, productDiscountHook)
	case boil.BeforeUpsertHook:
		productDiscountBeforeUpsertHooks = append(productDiscountBeforeUpsertHooks, productDiscountHook)
	case boil.AfterUpsertHook:
		productDiscountAfterUpsertHooks = append(productDiscountAfterUpsertHooks, productDiscountHook)
	}
}

// One returns a single productDiscount record from the query.
func (q productDiscountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductDiscount, error) {
	o := &ProductDiscount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for product_discounts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductDiscount records from the query.
func (q productDiscountQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductDiscountSlice, error) {
	var o []*ProductDiscount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to ProductDiscount slice")
	}

	if len(productDiscountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductDiscount records in the query.
func (q productDiscountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count product_discounts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productDiscountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if product_discounts exists")
	}

	return count > 0, nil
}

// Products retrieves all the product's Products with an executor.
func (o *ProductDiscount) Products(mods ...qm.QueryMod) productQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"products_product_discounts\" on \"products\".\"id\" = \"products_product_discounts\".\"product_id\""),
		qm.Where("\"products_product_discounts\".\"product_discount_id\"=?", o.ID),
	)

	return Products(queryMods...)
}

// LoadProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productDiscountL) LoadProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductDiscount interface{}, mods queries.Applicator) error {
	var slice []*ProductDiscount
	var object *ProductDiscount

	if singular {
		var ok bool
		object, ok = maybeProductDiscount.(*ProductDiscount)
		if !ok {
			object = new(ProductDiscount)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductDiscount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductDiscount))
			}
		}
	} else {
		s, ok := maybeProductDiscount.(*[]*ProductDiscount)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductDiscount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductDiscount))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productDiscountR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productDiscountR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"products\".\"id\", \"products\".\"name\", \"products\".\"price\", \"products\".\"description\", \"products\".\"quantity\", \"products\".\"created_at\", \"products\".\"updated_at\", \"products\".\"deleted_at\", \"a\".\"product_discount_id\""),
		qm.From("\"products\""),
		qm.InnerJoin("\"products_product_discounts\" as \"a\" on \"products\".\"id\" = \"a\".\"product_id\""),
		qm.WhereIn("\"a\".\"product_discount_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load products")
	}

	var resultSlice []*Product

	var localJoinCols []int64
	for results.Next() {
		one := new(Product)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.Name, &one.Price, &one.Description, &one.Quantity, &one.CreatedAt, &one.UpdatedAt, &one.DeletedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for products")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice products")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Products = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productR{}
			}
			foreign.R.ProductDiscounts = append(foreign.R.ProductDiscounts, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Products = append(local.R.Products, foreign)
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductDiscounts = append(foreign.R.ProductDiscounts, local)
				break
			}
		}
	}

	return nil
}

// AddProducts adds the given related objects to the existing relationships
// of the product_discount, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.ProductDiscounts appropriately.
func (o *ProductDiscount) AddProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Product) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"products_product_discounts\" (\"product_discount_id\", \"product_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &productDiscountR{
			Products: related,
		}
	} else {
		o.R.Products = append(o.R.Products, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productR{
				ProductDiscounts: ProductDiscountSlice{o},
			}
		} else {
			rel.R.ProductDiscounts = append(rel.R.ProductDiscounts, o)
		}
	}
	return nil
}

// SetProducts removes all previously related items of the
// product_discount replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductDiscounts's Products accordingly.
// Replaces o.R.Products with related.
// Sets related.R.ProductDiscounts's Products accordingly.
func (o *ProductDiscount) SetProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Product) error {
	query := "delete from \"products_product_discounts\" where \"product_discount_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeProductsFromProductDiscountsSlice(o, related)
	if o.R != nil {
		o.R.Products = nil
	}

	return o.AddProducts(ctx, exec, insert, related...)
}

// RemoveProducts relationships from objects passed in.
// Removes related items from R.Products (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductDiscounts.
func (o *ProductDiscount) RemoveProducts(ctx context.Context, exec boil.ContextExecutor, related ...*Product) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"products_product_discounts\" where \"product_discount_id\" = $1 and \"product_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeProductsFromProductDiscountsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Products {
			if rel != ri {
				continue
			}

			ln := len(o.R.Products)
			if ln > 1 && i < ln-1 {
				o.R.Products[i] = o.R.Products[ln-1]
			}
			o.R.Products = o.R.Products[:ln-1]
			break
		}
	}

	return nil
}

func removeProductsFromProductDiscountsSlice(o *ProductDiscount, related []*Product) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.ProductDiscounts {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.ProductDiscounts)
			if ln > 1 && i < ln-1 {
				rel.R.ProductDiscounts[i] = rel.R.ProductDiscounts[ln-1]
			}
			rel.R.ProductDiscounts = rel.R.ProductDiscounts[:ln-1]
			break
		}
	}
}

// ProductDiscounts retrieves all the records using an executor.
func ProductDiscounts(mods ...qm.QueryMod) productDiscountQuery {
	mods = append(mods, qm.From("\"product_discounts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_discounts\".*"})
	}

	return productDiscountQuery{q}
}

// FindProductDiscount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductDiscount(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductDiscount, error) {
	productDiscountObj := &ProductDiscount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_discounts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productDiscountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from product_discounts")
	}

	if err = productDiscountObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productDiscountObj, err
	}

	return productDiscountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductDiscount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no product_discounts provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productDiscountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productDiscountInsertCacheMut.RLock()
	cache, cached := productDiscountInsertCache[key]
	productDiscountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productDiscountAllColumns,
			productDiscountColumnsWithDefault,
			productDiscountColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, productDiscountGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(productDiscountType, productDiscountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productDiscountType, productDiscountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_discounts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_discounts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into product_discounts")
	}

	if !cached {
		productDiscountInsertCacheMut.Lock()
		productDiscountInsertCache[key] = cache
		productDiscountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductDiscount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductDiscount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productDiscountUpdateCacheMut.RLock()
	cache, cached := productDiscountUpdateCache[key]
	productDiscountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productDiscountAllColumns,
			productDiscountPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, productDiscountGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update product_discounts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_discounts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productDiscountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productDiscountType, productDiscountMapping, append(wl, productDiscountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update product_discounts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for product_discounts")
	}

	if !cached {
		productDiscountUpdateCacheMut.Lock()
		productDiscountUpdateCache[key] = cache
		productDiscountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productDiscountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for product_discounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for product_discounts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductDiscountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productDiscountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_discounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productDiscountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in productDiscount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all productDiscount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductDiscount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no product_discounts provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productDiscountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productDiscountUpsertCacheMut.RLock()
	cache, cached := productDiscountUpsertCache[key]
	productDiscountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			productDiscountAllColumns,
			productDiscountColumnsWithDefault,
			productDiscountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productDiscountAllColumns,
			productDiscountPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, productDiscountGeneratedColumns)
		update = strmangle.SetComplement(update, productDiscountGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert product_discounts, could not build update column list")
		}

		ret := strmangle.SetComplement(productDiscountAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(productDiscountPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert product_discounts, could not build conflict column list")
			}

			conflict = make([]string, len(productDiscountPrimaryKeyColumns))
			copy(conflict, productDiscountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_discounts\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(productDiscountType, productDiscountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productDiscountType, productDiscountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert product_discounts")
	}

	if !cached {
		productDiscountUpsertCacheMut.Lock()
		productDiscountUpsertCache[key] = cache
		productDiscountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductDiscount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductDiscount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no ProductDiscount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productDiscountPrimaryKeyMapping)
	sql := "DELETE FROM \"product_discounts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from product_discounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for product_discounts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productDiscountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no productDiscountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from product_discounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for product_discounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductDiscountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productDiscountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productDiscountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_discounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productDiscountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from productDiscount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for product_discounts")
	}

	if len(productDiscountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductDiscount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductDiscount(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductDiscountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductDiscountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productDiscountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_discounts\".* FROM \"product_discounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productDiscountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in ProductDiscountSlice")
	}

	*o = slice

	return nil
}

// ProductDiscountExists checks if the ProductDiscount row exists.
func ProductDiscountExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_discounts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if product_discounts exists")
	}

	return exists, nil
}

// Exists checks if the ProductDiscount row exists.
func (o *ProductDiscount) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductDiscountExists(ctx, exec, o.ID)
}
