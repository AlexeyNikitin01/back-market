// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CartsProduct is an object representing the database table.
type CartsProduct struct {
	CartID            int64 `boil:"cart_id" json:"cartID" toml:"cartID" yaml:"cartID"`
	ProductID         int64 `boil:"product_id" json:"productID" toml:"productID" yaml:"productID"`
	QuantityProduct   int64 `boil:"quantity_product" json:"quantityProduct" toml:"quantityProduct" yaml:"quantityProduct"`
	TotalProductPrice int64 `boil:"total_product_price" json:"totalProductPrice" toml:"totalProductPrice" yaml:"totalProductPrice"`
	Discount          int   `boil:"discount" json:"discount" toml:"discount" yaml:"discount"`

	R *cartsProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cartsProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CartsProductColumns = struct {
	CartID            string
	ProductID         string
	QuantityProduct   string
	TotalProductPrice string
	Discount          string
}{
	CartID:            "cart_id",
	ProductID:         "product_id",
	QuantityProduct:   "quantity_product",
	TotalProductPrice: "total_product_price",
	Discount:          "discount",
}

var CartsProductTableColumns = struct {
	CartID            string
	ProductID         string
	QuantityProduct   string
	TotalProductPrice string
	Discount          string
}{
	CartID:            "carts_products.cart_id",
	ProductID:         "carts_products.product_id",
	QuantityProduct:   "carts_products.quantity_product",
	TotalProductPrice: "carts_products.total_product_price",
	Discount:          "carts_products.discount",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var CartsProductWhere = struct {
	CartID            whereHelperint64
	ProductID         whereHelperint64
	QuantityProduct   whereHelperint64
	TotalProductPrice whereHelperint64
	Discount          whereHelperint
}{
	CartID:            whereHelperint64{field: "\"carts_products\".\"cart_id\""},
	ProductID:         whereHelperint64{field: "\"carts_products\".\"product_id\""},
	QuantityProduct:   whereHelperint64{field: "\"carts_products\".\"quantity_product\""},
	TotalProductPrice: whereHelperint64{field: "\"carts_products\".\"total_product_price\""},
	Discount:          whereHelperint{field: "\"carts_products\".\"discount\""},
}

// CartsProductRels is where relationship names are stored.
var CartsProductRels = struct {
	Cart    string
	Product string
}{
	Cart:    "Cart",
	Product: "Product",
}

// cartsProductR is where relationships are stored.
type cartsProductR struct {
	Cart    *Cart    `boil:"Cart" json:"Cart" toml:"Cart" yaml:"Cart"`
	Product *Product `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
}

// NewStruct creates a new relationship struct
func (*cartsProductR) NewStruct() *cartsProductR {
	return &cartsProductR{}
}

func (r *cartsProductR) GetCart() *Cart {
	if r == nil {
		return nil
	}
	return r.Cart
}

func (r *cartsProductR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

// cartsProductL is where Load methods for each relationship are stored.
type cartsProductL struct{}

var (
	cartsProductAllColumns            = []string{"cart_id", "product_id", "quantity_product", "total_product_price", "discount"}
	cartsProductColumnsWithoutDefault = []string{"cart_id", "product_id", "quantity_product", "total_product_price", "discount"}
	cartsProductColumnsWithDefault    = []string{}
	cartsProductPrimaryKeyColumns     = []string{"cart_id", "product_id"}
	cartsProductGeneratedColumns      = []string{}
)

type (
	// CartsProductSlice is an alias for a slice of pointers to CartsProduct.
	// This should almost always be used instead of []CartsProduct.
	CartsProductSlice []*CartsProduct
	// CartsProductHook is the signature for custom CartsProduct hook methods
	CartsProductHook func(context.Context, boil.ContextExecutor, *CartsProduct) error

	cartsProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cartsProductType                 = reflect.TypeOf(&CartsProduct{})
	cartsProductMapping              = queries.MakeStructMapping(cartsProductType)
	cartsProductPrimaryKeyMapping, _ = queries.BindMapping(cartsProductType, cartsProductMapping, cartsProductPrimaryKeyColumns)
	cartsProductInsertCacheMut       sync.RWMutex
	cartsProductInsertCache          = make(map[string]insertCache)
	cartsProductUpdateCacheMut       sync.RWMutex
	cartsProductUpdateCache          = make(map[string]updateCache)
	cartsProductUpsertCacheMut       sync.RWMutex
	cartsProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cartsProductAfterSelectHooks []CartsProductHook

var cartsProductBeforeInsertHooks []CartsProductHook
var cartsProductAfterInsertHooks []CartsProductHook

var cartsProductBeforeUpdateHooks []CartsProductHook
var cartsProductAfterUpdateHooks []CartsProductHook

var cartsProductBeforeDeleteHooks []CartsProductHook
var cartsProductAfterDeleteHooks []CartsProductHook

var cartsProductBeforeUpsertHooks []CartsProductHook
var cartsProductAfterUpsertHooks []CartsProductHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CartsProduct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartsProductAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CartsProduct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartsProductBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CartsProduct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartsProductAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CartsProduct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartsProductBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CartsProduct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartsProductAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CartsProduct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartsProductBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CartsProduct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartsProductAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CartsProduct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartsProductBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CartsProduct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartsProductAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCartsProductHook registers your hook function for all future operations.
func AddCartsProductHook(hookPoint boil.HookPoint, cartsProductHook CartsProductHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cartsProductAfterSelectHooks = append(cartsProductAfterSelectHooks, cartsProductHook)
	case boil.BeforeInsertHook:
		cartsProductBeforeInsertHooks = append(cartsProductBeforeInsertHooks, cartsProductHook)
	case boil.AfterInsertHook:
		cartsProductAfterInsertHooks = append(cartsProductAfterInsertHooks, cartsProductHook)
	case boil.BeforeUpdateHook:
		cartsProductBeforeUpdateHooks = append(cartsProductBeforeUpdateHooks, cartsProductHook)
	case boil.AfterUpdateHook:
		cartsProductAfterUpdateHooks = append(cartsProductAfterUpdateHooks, cartsProductHook)
	case boil.BeforeDeleteHook:
		cartsProductBeforeDeleteHooks = append(cartsProductBeforeDeleteHooks, cartsProductHook)
	case boil.AfterDeleteHook:
		cartsProductAfterDeleteHooks = append(cartsProductAfterDeleteHooks, cartsProductHook)
	case boil.BeforeUpsertHook:
		cartsProductBeforeUpsertHooks = append(cartsProductBeforeUpsertHooks, cartsProductHook)
	case boil.AfterUpsertHook:
		cartsProductAfterUpsertHooks = append(cartsProductAfterUpsertHooks, cartsProductHook)
	}
}

// One returns a single cartsProduct record from the query.
func (q cartsProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CartsProduct, error) {
	o := &CartsProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for carts_products")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CartsProduct records from the query.
func (q cartsProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (CartsProductSlice, error) {
	var o []*CartsProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to CartsProduct slice")
	}

	if len(cartsProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CartsProduct records in the query.
func (q cartsProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count carts_products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cartsProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if carts_products exists")
	}

	return count > 0, nil
}

// Cart pointed to by the foreign key.
func (o *CartsProduct) Cart(mods ...qm.QueryMod) cartQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CartID),
	}

	queryMods = append(queryMods, mods...)

	return Carts(queryMods...)
}

// Product pointed to by the foreign key.
func (o *CartsProduct) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// LoadCart allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cartsProductL) LoadCart(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCartsProduct interface{}, mods queries.Applicator) error {
	var slice []*CartsProduct
	var object *CartsProduct

	if singular {
		var ok bool
		object, ok = maybeCartsProduct.(*CartsProduct)
		if !ok {
			object = new(CartsProduct)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCartsProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCartsProduct))
			}
		}
	} else {
		s, ok := maybeCartsProduct.(*[]*CartsProduct)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCartsProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCartsProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cartsProductR{}
		}
		args = append(args, object.CartID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cartsProductR{}
			}

			for _, a := range args {
				if a == obj.CartID {
					continue Outer
				}
			}

			args = append(args, obj.CartID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`carts`),
		qm.WhereIn(`carts.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Cart")
	}

	var resultSlice []*Cart
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Cart")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for carts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for carts")
	}

	if len(cartAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Cart = foreign
		if foreign.R == nil {
			foreign.R = &cartR{}
		}
		foreign.R.CartsProducts = append(foreign.R.CartsProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CartID == foreign.ID {
				local.R.Cart = foreign
				if foreign.R == nil {
					foreign.R = &cartR{}
				}
				foreign.R.CartsProducts = append(foreign.R.CartsProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cartsProductL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCartsProduct interface{}, mods queries.Applicator) error {
	var slice []*CartsProduct
	var object *CartsProduct

	if singular {
		var ok bool
		object, ok = maybeCartsProduct.(*CartsProduct)
		if !ok {
			object = new(CartsProduct)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCartsProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCartsProduct))
			}
		}
	} else {
		s, ok := maybeCartsProduct.(*[]*CartsProduct)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCartsProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCartsProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cartsProductR{}
		}
		args = append(args, object.ProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cartsProductR{}
			}

			for _, a := range args {
				if a == obj.ProductID {
					continue Outer
				}
			}

			args = append(args, obj.ProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.CartsProducts = append(foreign.R.CartsProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.CartsProducts = append(foreign.R.CartsProducts, local)
				break
			}
		}
	}

	return nil
}

// SetCart of the cartsProduct to the related item.
// Sets o.R.Cart to related.
// Adds o to related.R.CartsProducts.
func (o *CartsProduct) SetCart(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Cart) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"carts_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"cart_id"}),
		strmangle.WhereClause("\"", "\"", 2, cartsProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.CartID, o.ProductID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CartID = related.ID
	if o.R == nil {
		o.R = &cartsProductR{
			Cart: related,
		}
	} else {
		o.R.Cart = related
	}

	if related.R == nil {
		related.R = &cartR{
			CartsProducts: CartsProductSlice{o},
		}
	} else {
		related.R.CartsProducts = append(related.R.CartsProducts, o)
	}

	return nil
}

// SetProduct of the cartsProduct to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.CartsProducts.
func (o *CartsProduct) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"carts_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, cartsProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.CartID, o.ProductID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &cartsProductR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			CartsProducts: CartsProductSlice{o},
		}
	} else {
		related.R.CartsProducts = append(related.R.CartsProducts, o)
	}

	return nil
}

// CartsProducts retrieves all the records using an executor.
func CartsProducts(mods ...qm.QueryMod) cartsProductQuery {
	mods = append(mods, qm.From("\"carts_products\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"carts_products\".*"})
	}

	return cartsProductQuery{q}
}

// FindCartsProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCartsProduct(ctx context.Context, exec boil.ContextExecutor, cartID int64, productID int64, selectCols ...string) (*CartsProduct, error) {
	cartsProductObj := &CartsProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"carts_products\" where \"cart_id\"=$1 AND \"product_id\"=$2", sel,
	)

	q := queries.Raw(query, cartID, productID)

	err := q.Bind(ctx, exec, cartsProductObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from carts_products")
	}

	if err = cartsProductObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cartsProductObj, err
	}

	return cartsProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CartsProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no carts_products provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cartsProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cartsProductInsertCacheMut.RLock()
	cache, cached := cartsProductInsertCache[key]
	cartsProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cartsProductAllColumns,
			cartsProductColumnsWithDefault,
			cartsProductColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cartsProductType, cartsProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cartsProductType, cartsProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"carts_products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"carts_products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into carts_products")
	}

	if !cached {
		cartsProductInsertCacheMut.Lock()
		cartsProductInsertCache[key] = cache
		cartsProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CartsProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CartsProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cartsProductUpdateCacheMut.RLock()
	cache, cached := cartsProductUpdateCache[key]
	cartsProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cartsProductAllColumns,
			cartsProductPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update carts_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"carts_products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cartsProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cartsProductType, cartsProductMapping, append(wl, cartsProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update carts_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for carts_products")
	}

	if !cached {
		cartsProductUpdateCacheMut.Lock()
		cartsProductUpdateCache[key] = cache
		cartsProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cartsProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for carts_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for carts_products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CartsProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cartsProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"carts_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cartsProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in cartsProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all cartsProduct")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CartsProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no carts_products provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cartsProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cartsProductUpsertCacheMut.RLock()
	cache, cached := cartsProductUpsertCache[key]
	cartsProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			cartsProductAllColumns,
			cartsProductColumnsWithDefault,
			cartsProductColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cartsProductAllColumns,
			cartsProductPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert carts_products, could not build update column list")
		}

		ret := strmangle.SetComplement(cartsProductAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(cartsProductPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert carts_products, could not build conflict column list")
			}

			conflict = make([]string, len(cartsProductPrimaryKeyColumns))
			copy(conflict, cartsProductPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"carts_products\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(cartsProductType, cartsProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cartsProductType, cartsProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert carts_products")
	}

	if !cached {
		cartsProductUpsertCacheMut.Lock()
		cartsProductUpsertCache[key] = cache
		cartsProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CartsProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CartsProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no CartsProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cartsProductPrimaryKeyMapping)
	sql := "DELETE FROM \"carts_products\" WHERE \"cart_id\"=$1 AND \"product_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from carts_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for carts_products")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cartsProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no cartsProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from carts_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for carts_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CartsProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cartsProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cartsProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"carts_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cartsProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from cartsProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for carts_products")
	}

	if len(cartsProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CartsProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCartsProduct(ctx, exec, o.CartID, o.ProductID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CartsProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CartsProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cartsProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"carts_products\".* FROM \"carts_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cartsProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in CartsProductSlice")
	}

	*o = slice

	return nil
}

// CartsProductExists checks if the CartsProduct row exists.
func CartsProductExists(ctx context.Context, exec boil.ContextExecutor, cartID int64, productID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"carts_products\" where \"cart_id\"=$1 AND \"product_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, cartID, productID)
	}
	row := exec.QueryRowContext(ctx, sql, cartID, productID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if carts_products exists")
	}

	return exists, nil
}

// Exists checks if the CartsProduct row exists.
func (o *CartsProduct) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CartsProductExists(ctx, exec, o.CartID, o.ProductID)
}
